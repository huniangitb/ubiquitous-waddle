# 文件名: .github/workflows/android-build.yml

name: Build Android App

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ] # 建议也为 PR 触发，以便检查代码
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3.2.2

    # 关键步骤：启用 Gradle 缓存
    # gradle/actions/setup-gradle@v3 action 内置了缓存功能。
    # 它会自动缓存 Gradle 用户目录 (~/.gradle/caches 和 ~/.gradle/wrapper)。
    # 在 main 分支上，它会读取并写入缓存。
    # 在 PR 中，它默认只读取缓存，以避免污染 main 分支的缓存。
    - name: Setup Gradle and Cache
      uses: gradle/actions/setup-gradle@v3
      with:
        gradle-version: 8.5
        # 默认情况下，此 action 会自动处理缓存，无需额外配置。
        # 它会根据你的 gradle 文件（build.gradle.kts, settings.gradle.kts 等）生成缓存键。

    - name: Build Debug APK (Unsigned)
      # 使用 'gradle' 命令，因为它由上一步的 setup-gradle 提供
      # --build-cache 参数利用了 Gradle 的构建缓存，可以进一步加速构建
      run: gradle assembleDebug --build-cache

    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: unsigned-apk
        # 注意：路径可能会因 Gradle 和 AGP 版本而异，请确认此路径正确
        path: app/build/outputs/apk/debug/app-debug.apk